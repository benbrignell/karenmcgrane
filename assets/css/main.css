/*! normalize.css v3.0.1 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

.contain-sm {
  width: 95%;
  margin: 0 auto; }

@media (min-width: 43em) {
  .contain-sm {
    max-width: 50em;
    padding-left: 10%;
    padding-right: 10%; } }

.contain-md {
  width: 95%;
  margin: 0 auto; }

@media (min-width: 43em) {
  .contain-md {
    max-width: 50em;
    padding-left: 5%;
    padding-right: 5%; } }

.contain-lg {
  width: 95%;
  margin: 0 auto; }

@media (min-width: 43em) {
  .contain-lg {
    max-width: 50em; } }

.contain-lg {
  width: 95%;
  margin: 0 auto; }

@media (min-width: 43em) {
  .contain-lg {
    max-width: 60em; } }

.grid {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: nowrap;
      -ms-flex-wrap: nowrap;
          flex-wrap: nowrap;
  margin-left: -1.25rem;
  margin-right: -1.25rem; }

.grid > * {
  padding-left: 1.25rem;
  padding-right: 1.25rem; }

.cell-sixth {
  -webkit-flex: 0 0 16.66667%;
      -ms-flex: 0 0 16.66667%;
          flex: 0 0 16.66667%;
  max-width: 16.66667%; }

.cell-fourth {
  -webkit-flex: 0 0 25%;
      -ms-flex: 0 0 25%;
          flex: 0 0 25%;
  max-width: 25%; }

.cell-third {
  -webkit-flex: 0 0 33.33333%;
      -ms-flex: 0 0 33.33333%;
          flex: 0 0 33.33333%;
  max-width: 33.33333%; }

.cell-half {
  -webkit-flex: 0 0 50%;
      -ms-flex: 0 0 50%;
          flex: 0 0 50%;
  max-width: 50%; }

.cell-full {
  -webkit-flex: 0 0 100%;
      -ms-flex: 0 0 100%;
          flex: 0 0 100%;
  max-width: 100%; }

.special {
  color: #21A99C; }

.meta {
  color: #C0C0C0;
  font-size: 1.32875rem;
  line-height: 1.3; }

.meta-light {
  line-height: 1.3;
  color: #FFFEF9;
  font-size: 1.32875rem; }

.meta-dark {
  line-height: 1.3;
  color: #303030;
  font-size: 1.32875rem; }

.text-center {
  text-align: center; }

.text-left {
  text-align: left; }

.text-right {
  text-align: right; }

.edit-link {
  font-size: 1.32875rem;
  text-transform: uppercase;
  letter-spacing: 1px;
  font-weight: 900;
  color: white; }

.visually-hidden {
  position: absolute;
  top: -9999999px;
  left: -999999px; }

.contain {
  position: relative;
  margin: 0 auto;
  padding: 0 1.25rem; }

.contain-sm {
  max-width: 36em; }

.contain-md {
  max-width: 43em; }

.contain-lg {
  max-width: 50em; }

.contain-flex {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: row wrap;
      -ms-flex-flow: row wrap;
          flex-flow: row wrap; }

.unit {
  -webkit-flex: 1 0;
      -ms-flex: 1 0;
          flex: 1 0; }

.contain-flex .tease-source {
  margin-top: 1%;
  margin-bottom: 1%;
  background-color: #fff6c6;
  padding-left: 1.25rem;
  padding-right: 1.25rem;
  padding-bottom: 1.25rem; }

@media (min-width: 43em) {
  .contain-flex .tease-source {
    margin-right: 1%;
    margin-left: 1%;
    width: 48%; } }

.animated {
  -webkit-animation-duration: 1s;
  animation-duration: 1s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both; }

@-webkit-keyframes fadeInDown {
  0% {
    opacity: 0;
    -webkit-transform: translateY(-20px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0); } }

@keyframes fadeInDown {
  0% {
    opacity: 0;
    -webkit-transform: translateY(-20px);
            transform: translateY(-20px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
            transform: translateY(0); } }

.fadeInDown {
  -webkit-animation-name: fadeInDown;
  animation-name: fadeInDown; }

* {
  box-sizing: border-box; }

body {
  word-wrap: break-word; }

img {
  max-width: 100%; }

html {
  font-size: 80%;
  line-height: 1.5;
  font-weight: 500; }

body {
  font-family: "Avenir W01", serif;
  font-size: 1.25rem;
  color: #303030; }

.wf-loading body {
  font-family: "Helvetica", sans-serif; }

.wf-loading body h1, .wf-loading body h2, .wf-loading body h3, .wf-loading body h4, .wf-loading body h5, .wf-loading body h6 {
  font-family: "Helvetica", sans-serif;
  font-weight: 900; }

a {
  color: #303030;
  text-decoration: none; }

a:hover, a:focus {
  color: #21A99C; }

a:active {
  color: black; }

a:link {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0.3); }

h1, h2, h3, h4, h5, h6 {
  font-family: "Avenir W01", serif;
  font-weight: 900;
  margin-bottom: 0;
  line-height: 1.3; }

h1 {
  font-size: 4.0625rem;
  margin-top: 2.5rem; }

h2 {
  font-size: 3.20375rem; }

h3 {
  font-size: 2.5rem; }

h4 {
  font-size: 2.03125rem; }

h5 {
  font-size: 1.25rem;
  font-family: "Avenir W01", serif; }

h6 {
  font-family: "Avenir W01", serif;
  font-size: 1.41246rem;
  text-transform: uppercase;
  letter-spacing: 1px; }

small {
  font-size: 1.32875rem; }

strong {
  font-weight: 900; }

blockquote {
  font-size: 2.03125rem;
  font-style: italic;
  margin-left: 2.5rem; }

blockquote:before {
  background-image: url(../img/svg-min/quotes-left.min.svg);
  background-repeat: no-repeat;
  opacity: 0.7;
  content: " ";
  width: 2.5rem;
  height: 2.5rem;
  position: absolute;
  left: 0; }

p {
  margin-top: 0.75rem;
  margin-bottom: 0.75rem; }

.lead {
  font-size: 2.03125rem; }

*:focus {
  outline: 0; }

label {
  margin-top: 2.03125rem;
  margin-bottom: 0.75rem;
  font-family: "Avenir W01", serif; }

input[type="search"] {
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  -webkit-appearance: textfield;
  box-sizing: content-box; }

input[type="search"]::-webkit-search-decoration,
input[type="search"]::-webkit-search-cancel-button {
  -webkit-appearance: none; }

textarea {
  overflow: auto;
  vertical-align: top; }

textarea,
input[type="text"],
input[type="password"],
input[type="datetime"],
input[type="datetime-local"],
input[type="date"],
input[type="month"],
input[type="time"],
input[type="week"],
input[type="number"],
input[type="email"],
input[type="url"],
input[type="search"],
input[type="tel"] {
  width: 100%;
  border: 1px dotted #f3f3f3; }

textarea:focus,
input[type="text"]:focus,
input[type="password"]:focus,
input[type="datetime"]:focus,
input[type="datetime-local"]:focus,
input[type="date"]:focus,
input[type="month"]:focus,
input[type="time"]:focus,
input[type="week"]:focus,
input[type="number"]:focus,
input[type="email"]:focus,
input[type="url"]:focus,
input[type="search"]:focus,
input[type="tel"]:focus {
  border-color: #3C7996;
  background-color: #fff6c6; }

input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-right: 0.75rem;
  margin-top: 1px \9;
  *margin-top: 0;
  line-height: normal;
  cursor: pointer; }

select,
input[type="file"] {
  *margin-top: 4px;
  /* In IE7, the height of the select element cannot be changed by height, only font-size */ }

select:focus,
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  outline: 1px dotted #f3f3f3;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px; }

fieldset {
  border: 0; }

.btn {
  display: inline-block;
  padding: 0.75rem;
  margin-top: 1.32875rem;
  margin-bottom: 1.32875rem; }

.btn .icon {
  fill: #FFFEF9; }

.btn--danger {
  background-color: white;
  color: #FFFEF9; }

.btn--danger:hover {
  background-color: #9999ff;
  color: #FFFEF9; }

.btn--danger:active {
  background-color: blue;
  color: #ffed93; }

.btn--warning {
  background-color: #F7DE32;
  color: #FFFEF9; }

.btn--warning:hover {
  background-color: #bca507;
  color: #FFFEF9; }

.btn--warning:active {
  background-color: #282302;
  color: #ffed93; }

.btn--success {
  background-color: #1BBF54;
  color: #FFFEF9; }

.btn--success:hover {
  background-color: #0e662d;
  color: #FFFEF9; }

.btn--success:active {
  background-color: black;
  color: #ffed93; }

.btn--cta {
  background-color: #303030;
  color: #FFFEF9; }

.btn--cta:hover {
  background-color: black;
  color: #FFFEF9; }

.btn--cta:active {
  background-color: black;
  color: #ffed93; }

.link--edit a {
  color: #F7DE32;
  font-style: italic; }

.alert {
  padding: 1.25rem;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex; }

@media (min-width: 36em) {
  .alert {
    margin-right: -1.25rem;
    margin-left: -1.25rem; } }

.alert-danger {
  background-color: white;
  color: #FFFEF9; }

.alert-warning {
  background-color: #fdf6c5;
  color: #FFFEF9; }

.alert-success {
  background-color: #85eeaa;
  color: #FFFEF9; }

.alert-cta {
  background-color: #7d7d7d;
  color: #FFFEF9; }

.alert-img {
  -webkit-flex: 1 0;
      -ms-flex: 1 0;
          flex: 1 0; }

.alert-cta .icon {
  fill: #FFFEF9; }

.alert-content {
  -webkit-flex: 2 0;
      -ms-flex: 2 0;
          flex: 2 0; }

.alert-title {
  margin-top: 1.25rem; }

table {
  width: 100%;
  font-family: "Avenir W01", serif;
  margin-bottom: 1.5em; }

table caption {
  margin: 0 0 7px;
  font-size: 0.75rem;
  color: #FFFEF9; }

tr:nth-child(even) {
  background-color: #fff6c6; }

td {
  padding: 7px;
  border-right: 1px solid #F7DE32; }

td:last-child {
  border-right: 0; }

th {
  background-color: #F7DE32;
  border-bottom: 1px solid #F7DE32;
  border-right: 1px solid #F7DE32; }

th:last-child {
  border-right: 0; }

.icon {
  width: 1.25rem;
  height: 1.25rem;
  display: inline-block; }

.shape {
  width: 100%; }

.header.-site {
  text-align: center; }

.header.-single {
  margin-bottom: 1.25rem; }

.header-tagline {
  margin-bottom: 20px; }

.nav__list--site {
  list-style-type: none;
  padding-left: 0; }

.nav__item--site {
  display: inline-block;
  margin-left: 1.25rem;
  margin-right: 1.25rem; }

.nav-prev,
.nav-next {
  -webkit-flex: 1 0;
      -ms-flex: 1 0;
          flex: 1 0; }

.nav-prev {
  text-align: right; }

.tease-meta {
  color: #C0C0C0;
  font-size: 1.32875rem; }

.tease {
  border-bottom: 1px dotted #f3f3f3;
  padding-bottom: 2.03125rem; }

.tease:last-child {
  border-bottom: none; }

.tease .unit {
  -webkit-align-self: center;
      -ms-flex-item-align: center;
              -ms-grid-row-align: center;
          align-self: center; }

.tease-more.-default {
  -webkit-flex: 1 0;
      -ms-flex: 1 0;
          flex: 1 0; }

.more-icon {
  font-size: 6.09375rem;
  padding-left: 1.25rem; }

.tease-main.-default {
  -webkit-flex: 6 0;
      -ms-flex: 6 0;
          flex: 6 0; }

.block_list-list {
  list-style-type: none;
  margin: 0;
  padding: 0; }

.footer--site {
  margin-top: 2.5rem; }

.footer--site:before, .footer--site:after {
  content: " ";
  display: table; }

.footer--site:after {
  clear: both; }

.footer--site .contain {
  border-top: 1px dotted #f3f3f3; }

.footer--site p {
  color: #C0C0C0;
  font-size: 1.32875rem; }

@media (min-width: 36em) {
  .footer__chunk--copy {
    float: left;
    text-align: left; }
  .footer__chunk--credits {
    float: right;
    text-align: right; } }

.single__citations {
  list-style-type: none;
  padding-left: 0; }

.single__citations li {
  color: #C0C0C0; }

/*# sourceMappingURL=data:application/json;base64, */

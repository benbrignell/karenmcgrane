// ----
// Media Queries
// ----

// http://css-tricks.com/conditional-media-query-mixins/

$MQs: true;

@mixin bp($point) {
  @if ($MQs) {
    // These screen sized map to the screen variables in _varibles.scss
    $bp-xs: "(min-width: #{$screen-xs})";
    $bp-sm: "(min-width: #{$screen-sm})";
    $bp-md: "(min-width: #{$screen-md})";
    $bp-lg: "(min-width: #{$screen-lg})";
    $bp-xl: "(min-width: #{$screen-xl})";

    @if $point == xs {
      @media #{$bp-xs} { @content; }
    }
    @else if $point == sm or $point == nav {
      @media #{$bp-sm} { @content; }
    }
    @else if $point == md {
      @media #{$bp-md} { @content; }
    }
    @else if $point == lg {
      @media #{$bp-lg} { @content; }
    }
    @else if $point == xl {
      @media #{$bp-xl} { @content; }
    }
  }
}



// ----
// Visual Design
// ----

// Button
@mixin button( $button-color, $text-color: $white ) {
	background: $button-color;
	font-weight: 700;
	border-radius: 2px;

	// TODO: BAD BAD
	// Remove important
	// Or is this better than a new style to override the <a> color?
	color: $text-color !important;

	@extend %btn;

	&:hover,
	&:focus {
		background: darken( $button-color, 10% );
		color: $text-color;
	}

	&:active {
		background: darken( $button-color, 40% );
	}
}



// ----
// Layout
// ----

// Containers

$c-pad: 10%;

@mixin contain($size: md) {
  width: 95%;
  margin: 0 auto;

  @include bp(md) {
    @if $size != xl {
      max-width: $screen-lg;
    }
    @else {
      max-width: $screen-xl;
    }

    @if $size == sm {
      padding-left: $c-pad;
      padding-right: $c-pad;
    }
    @elseif $size == md {
      padding-left: $c-pad/2;
      padding-right: $c-pad/2;
    }
  }
}

.contain-sm {
  @include contain(sm);
}

.contain-md {
  @include contain(md);
}

.contain-lg {
  @include contain(lg);
}

.contain-lg {
  @include contain(xl);
}




// Flexbox Layout

$sizes: (
  full:   100%,
  half:   50%,
  third:  33.333333%,
  fourth: 25%,
  fifth:  20%,
  sixth:  16.66666667%
);

$gutter: $size-p;

@mixin cell($size: false) {
  @if $size != false {
    flex: 0 0 map-get($sizes, $size);
    max-width: map-get($sizes, $size); // Fix for Firefox
  }
}

@mixin grid($guttered: true, $wrap: nowrap) {
  display: flex;
  flex-wrap: $wrap;

  @if $guttered {
    & > * {
      padding-left: $gutter;
      padding-right: $gutter;
    }
    margin-left: -$gutter;
    margin-right: -$gutter;
  }

}

.grid {
  @include grid;
}

.cell-sixth {
  @include cell(sixth);
}

.cell-fourth {
  @include cell(fourth);
}

.cell-third {
  @include cell(third);
}

.cell-half {
  @include cell(half);
}

.cell-full {
  @include cell(full);
}


@mixin clearfix() {
    &:before,
    &:after {
        content: " "; // 1
        display: table; // 2
    }
    &:after {
        clear: both;
    }
}




// ----
// Typography
// ----

@mixin upperspace() {
    text-transform: uppercase;
    letter-spacing: 1px;
}

@mixin meta($color: $color-text-med, $margin: true) {
    color: $color;
    font-size: $size-sml;

    @if $margin == false {
        margin: 0;
    }
}



